AlgorithmUtil
=============
Just added the coding problems, just keeping it as collection so that i can find them quickly.

Algorithms playground for common questions solved in Java syntax.

This repository contains my solution for some common algorithms. I've created this repository to learn about algorithms and improve solving different common computer science problems. I'll try to add more solutions if I have time :)

Each solved problem has a program written in Java. Every solution is tested and some problems contains more than one solution with different implementations.

You can check the solution executing tests inside tests directory. Some of this problems have been resolved using TDD.

Problems
--------

### Arrays

* [Clockwise print array(src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Farrays%2FPrintArray.java)

### Commons

* [Hex conversion utility](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fcommons%2FConversionOfNumberSystems.java)
* [Majority number](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fcommons%2FMajorityNumber.java)
* [Maximum product](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fcommons%2FMaximumProduct.java)
* [TOPK algorithm - TOPK算法](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fcommons%2FTopK.java)

### Graph

* [Dijkstra algorithm - 迪杰斯特拉算法](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fgraph%2FDijkstra.java)
* [Directed graph depth first and breadth-first by adjacency table - 邻接表实现有向图深度优先和广度优先]
(src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fgraph%2FDirectedGraphByAdjacencyList.java)
* [Directed graph depth first and breadth-first by adjacency matrix - 邻接矩阵实现有向图深度优先和广度优先]
(src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fgraph%2FDirectedGraphByAdjacencyMatrix.java)
* [Floyd warshall - 弗洛伊德算法](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fgraph%2FFloydWarshall.java)
* [Kruskal - 克鲁斯卡尔算法](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fgraph%2FKruskal.java)
* [Prim - 普里姆算法](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fgraph%2FPrim.java)
* [Undirected graph depth first and breadth-first by adjacency table - 邻接表实现无向图深度优先和广度优先]
(src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fgraph%2FUndirectedGraphByAdjacencyList.java)
* [Undirected graph depth first and breadth-first by adjacency matrix - 邻接矩阵实现无向图深度优先和广度优先]
(src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fgraph%2FUndirectedGraphByAdjacencyMatrix.java)

### Matrix

* [Matrix multiplication - 方阵乘法](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fmatrix%2FMatrix.java)

### Multithread

* [Thread synchronization - 线程同步](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fmultithread%2FThreadSynchronization.java)

### Queue

* [Simple priority queue - 简单的优先级队列](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fqueue%2FPriorityApp.java)

### Similarity

* [Words similarity by Tongyici CiLin - 基于同义词词林的词语相似度](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fsimilarity%2Fcilin%2FWordSimilarity.java)

### Sorting Algorithms

* [Bubble sorting - 冒泡排序](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fsorting%2FBubbleSort.java)
* [Insert sorting - 插入排序](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fsorting%2FInsertSort.java)
* [Quick sorting - 快速排序](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fsorting%2FQuickSort.java)
* [SelectionSort sorting - 选择排序](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fsorting%2FSelectionSort.java)
* [Shell sorting - 希尔排序](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fsorting%2FShellSort.java)

### Chinese to Spelling

* [Chinese to spelling - 中文转拼音](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fspelling%2FChineseToSpelling.java)

### Stack

* [Analyzing brackets match - 判断括号是否匹配](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstack%2FBracketsApp.java)
* [Check stack sequence - 检查栈的弹出序列](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstack%2FCheckStackSequence.java)
* [Infix expression turn to postfix expression - 中缀表达式转后缀表达式](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstack%2FInfixApp.java)
* [Maintain a minimum number of stacks - 保持最小数的栈](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstack%2FMinStack.java)
* [Postfix expression evaluation - 后缀表达式求值](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstack%2FPostfixApp.java)

### Strings

* [Binary search - 二分查找](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FBinarySearch.java)
* [Combination - 组合](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FCombination.java)
* [Jaccard similarity coefficient - 杰卡德相似度系数](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FJaccardSimilarityCoefficient.java)
* [Longest common subsequence - 最长公共子序列](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FLCS.java)
* [Longest common substring 1 - 最长公共子串1](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FLCS2.java)
* [Longest common substring 2 - 最长公共子串2](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FLCS3.java)
* [Levenshtein distance - 编辑距离](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FLevenshteinDistance.java)
* [Longest decreasing subsequence - 最长递减子序列](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FLongestDecreasingSubSequence.java)
* [Pattern string match - 模式串查找](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FPatternStringMatch.java)
* [Permutation - 全排列](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FPermutation.java)
* [Reverse string - 反转字符串](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FReverseString.java)
* [Lexicographical - 字典序排序](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Fstrings%2FStringSort.java)

### Trees

* [Depth-first traversal of a binary tree - 二叉树的深度优先遍历](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Ftrees%2FDepthFirstTraversal.java)
* [Get all path by given a number - 二叉树中结点值的和为输入整数的所有路径](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Ftrees%2FGetPathsBySum.java)
* [Level binary tree traversal - 二叉树的层次遍历](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Ftrees%2FLevelTraverseBinaryTree.java)
* [Binary tree traversal - 二叉树的遍历](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Ftrees%2FTraverseBinaryTree.java)
* [Verify sequence Of binary search tree - 验证二叉搜索树序列](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Falgorithms%2Ftrees%2FVerifySequenceOfBST.java)

### Design Patterns

* [Deep clone - 深拷贝](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Fpatterns%2Fcore%2FDeepClone.java)
* [Singleton - 单例](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Fpatterns%2Fcore%2FSingleton.java)
* [Static proxy - 静态代理](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Fpatterns%2Fproxy%2FStaticProxyHandler.java)
* [JDK dynamic proxy - JDK实现动态代理](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Fpatterns%2Fproxy%2FJDKProxyHandler.java)
* [CGLib dynamic proxy - CGLib实现动态代理](src%2Fmain%2Fjava%2Fcn%2Fcodepub%2Fpatterns%2Fproxy%2FCGLibProxyHandler.java)

Author
------------

* Developed By [Xu Wang](http://codepub.cn)

License
-------

Copyright 2015 Xu Wang

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
